name: Build 🏗️ and Publish 📦️

on:
  push:
    tags: ['*']
    branches:
      - main
    paths:
      - deb-get

jobs:
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Create Release
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Create release ${{ github.ref }} as a draft
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "${{ github.ref }}" --draft --generate-notes

  build-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [create-release]
    name: Build Release
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Build and Upload.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sudo apt-get -y update
        sudo apt-get -y install debhelper devscripts
        REL_VER=$(grep "^readonly VERSION" deb-get | cut -d'"' -f2)
        dch -v "${REL_VER}-1" --distribution=unstable "New upstream release."
        dpkg-buildpackage --build=binary --no-check-builddeps --compression=gzip
        gh release upload "${{ github.ref }}" "../deb-get_${REL_VER}-1_all.deb" --clobber

  publish-release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Publish Release
    needs: [build-release]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Publish release ${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "$(gh release view "${{ github.ref }}" --json assets --template '{{len.assets}}')" -lt 0 ]; then
          exit 1
        fi
        gh release edit "${{ github.ref }}" --draft=false

  build-development:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Build Development Snapshot
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Update version and changelog
      run: |
        # Get the most recent stable tag and the short SHA1 hash
        STABLE_TAG=$(git describe --tags --abbrev=0)
        SHORT_SHA=$(git rev-parse --short HEAD)
        NEW_VERSION="${STABLE_TAG}+${SHORT_SHA}"
        
        # Update the version in the deb-get file
        sed -i "s/^readonly VERSION=.*/readonly VERSION=\"${NEW_VERSION}\"/" deb-get
        
        # Prepend to the changelog
        echo "deb-get (${NEW_VERSION}-1) unstable; urgency=medium" | cat - debian/changelog > temp && mv temp debian/changelog
        echo "" >> debian/changelog
        echo "  * New development snapshot (based on commit ${SHORT_SHA})." >> debian/changelog
        echo "" >> debian/changelog
        echo " -- $(git log -1 --format='%aN <%aE>')  $(date -R)" >> debian/changelog
    - name: Build and Upload.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sudo apt-get -y update
        sudo apt-get -y install debhelper devscripts
        dch -v "${NEW_VERSION}-1" --distribution=unstable "New development snapshot (based on commit ${SHORT_SHA})."
        dpkg-buildpackage --build=binary --no-check-builddeps --compression=gzip
        # Assuming you have a GitHub release for development builds, otherwise you might want to use another method to store the.deb file
        gh release upload "development" "../deb-get_${NEW_VERSION}-1_all.deb" --clobber
